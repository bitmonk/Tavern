    map $host $allowedhosts 
    {
          default 0;
          127.0.0.1 1;
          GetTavern.com 1;
          localhost 1;
          tavern.com 1;
          files.tavern.is 1;
          static.tavern.is 1;
    }    

    # Gets the basename of the current uri
    map $uri $basename {
        ~/(?<captured_basename>[^/]*)$ $captured_basename;
    }
            

    # The Binaries server
    # All binaries must go through this server name, to ensure that it won't have access to cookies.
    # Also, so it can be moved later if nec.

    server 
    {
        server_name files.tavern.is;
        listen 96.126.105.180:443  ssl spdy ;
        ssl    on;
        ssl_certificate    /etc/ssl/certs/files.tavern.is.crt;
        ssl_certificate_key    /etc/ssl/certs/files.tavern.is.key;

        ssl_session_cache  shared:SSL:100m;
        ssl_ciphers RC4:AES128-SHA:AES:CAMELLIA128-SHA:!MD5:!ADH:!DH:!ECDH:!PSK:!SSLv2;
 
        proxy_http_version 1.1;
        proxy_set_header Connection "";
        proxy_set_header X-Real-IP $remote_addr;

        error_page 405 =200 @405;
        location @405 
        {
           proxy_pass http://tornados;
        }


        # Create a pass-through proxy to self
        # So that we will cache, not just hit GridFS everytime.
        location /binaries/ {
            proxy_cache binaries-cache;
            proxy_cache_valid  200 1y;
            proxy_cache_valid  404 302  1m;
            expires max;

            rewrite ^/binaries/(.*)/(.*)$ /binaries/$1 last;
            proxy_pass https://bins/binaries2/$basename;
	    proxy_ignore_headers Set-Cookie Expires Cache-Control X-Accel-Expires;
    	    proxy_cache_use_stale  error timeout invalid_header updating http_500 http_502 http_503 http_504;
        }



        # Create a location which pulls from mongo directly.
        # This is faster to do in nginx than in Python.

        location /binaries2/ 
        {

            # Allow direct mongo requests from Localhost only
            allow 127.0.0.1;
            allow 96.126.105.180;
            allow 198.74.56.235;
            deny    all;

            # Set additional headers to force download if it's not an image
            # Kinda complex to do in nginx, but it works ;)
            if ($uri ~ "/binaries/(.*)\.(png|jpg|jpeg|gif)$")
            {
                set $image 1;
                add_header Last-Modified "Tue, 10 Jul 1990 00:00:00 +0000";
            }
            if ($image != 1)
            {
                    add_header Content-Type "application/octet-stream";
                    add_header Content-Disposition "attachment";
                    add_header Last-Modified "Tue, 10 Jul 1990 00:00:00 +0000";
            }

            gridfs test field=filename type=string;
            mongo 127.0.0.1:27017;

        }
    }

   server
   {
   listen 80;
   rewrite ^(.*) https://$host$1 permanent;
   }

    # The main server.
    server 
    {
        listen 198.74.56.235:443  ssl spdy;

        ssl    on;
        
        ssl_certificate    /etc/ssl/certs/gettavern.com.crt;
        ssl_certificate_key    /etc/ssl/certs/gettavern.com.key;
        ssl_session_cache  shared:SSL:100m;
        ssl_ciphers RC4:AES128-SHA:AES:CAMELLIA128-SHA:!MD5:!ADH:!DH:!ECDH:!PSK:!SSLv2;

        proxy_http_version 1.1;
        proxy_set_header Connection "";
        proxy_set_header X-Real-IP $remote_addr;


        if ($allowedhosts = 0 )
        {
            rewrite  ^/(.*)$  http://gettavern.com/$1  permanent;
        }

        error_page 405 =200 @405;
        location @405 
        {
           proxy_pass http://tornados;
        }

        location /static/fonts/
        {
          add_header Access-Control-Allow-Origin *;
          proxy_pass http://tornados/static/fonts/;
          proxy_cache static-cache;
          proxy_cache_valid  200 1y;
          proxy_cache_valid  404 302  1m;
          expires max;
          proxy_ignore_headers Set-Cookie Expires Cache-Control X-Accel-Expires;
          proxy_cache_use_stale  error timeout invalid_header updating http_500 http_502 http_503 http_504;
        }

        location /static/
        {  
          proxy_pass http://tornados/static/;
          proxy_cache static-cache;
          proxy_cache_valid  200 1y;
          proxy_cache_valid  404 302  1m;  
          expires max;
          proxy_ignore_headers Set-Cookie Expires Cache-Control X-Accel-Expires;
          proxy_cache_use_stale  error timeout invalid_header updating http_500 http_502 http_503 http_504;
        }

        # Do **NOT** allow /binaries to work on the main URL
        location /binaries/ {
          rewrite ^/binaries/(.*)$ / last;
        }

        location /avatar/ {
                proxy_pass http://robohash.org/;
                expires max;
                add_header Last-Modified "Fri, 11 Feb 2011 16:00:00 GMT";
                proxy_cache avatar-cache;
                proxy_cache_valid  200 1y;
                proxy_cache_valid  404 302  1m;
                proxy_ignore_headers Set-Cookie Expires Cache-Control X-Accel-Expires;
                proxy_cache_use_stale  error timeout invalid_header updating http_500 http_502 http_503 http_504;
                }

       location /uploadnewmessage {
                proxy_pass http://tornados/uploadnewmessage;
                client_max_body_size 2000M;
                client_body_buffer_size 128k;


                upload_pass @uploads;
                upload_store /opt/uploads/;
                upload_store_access user:rw group:rw all:rw;
                upload_resumable on;
                upload_buffer_size 128K;
                upload_max_file_size 2000m;

                upload_set_form_field $upload_field_name.name "$upload_file_name";
                upload_set_form_field $upload_field_name.content_type "$upload_content_type";
                upload_set_form_field $upload_field_name.path "$upload_tmp_path";
                upload_aggregate_form_field $upload_field_name.size "$upload_file_size";
                upload_aggregate_form_field $upload_field_name.sha512 "$upload_file_sha512";

                upload_pass_form_field "submit";
                upload_pass_form_field "_xsrf";
                upload_pass_form_field "topic";
                upload_pass_form_field "subject";
                upload_pass_form_field "body";
                upload_pass_form_field "regarding";
                upload_pass_form_field "include_location";
                upload_pass_form_field "files";
                upload_pass_form_field "referenced_file1_hash";
                upload_pass_form_field "referenced_file1_name";
                upload_pass_form_field "referenced_file1_size";
                upload_pass_form_field "referenced_file1_contenttype";



        }

       location /uploadfile/fileonly {
                proxy_pass http://tornados/uploadfile/fileonly;
                client_max_body_size 2000M;
                client_body_buffer_size 128k;

                upload_pass @uploads;
                upload_store /opt/uploads/;
                upload_store_access user:rw group:rw all:rw;
                upload_resumable on;
                upload_buffer_size 128K;
                upload_max_file_size 2000m;

                upload_set_form_field $upload_field_name.name "$upload_file_name";
                upload_set_form_field $upload_field_name.content_type "$upload_content_type";
                upload_set_form_field $upload_field_name.path "$upload_tmp_path";
                upload_aggregate_form_field $upload_field_name.size "$upload_file_size";
                upload_aggregate_form_field $upload_field_name.sha512 "$upload_file_sha512";

                upload_pass_form_field "submit";
                upload_pass_form_field "_xsrf";
                upload_pass_form_field "files";
                upload_pass_form_field "files\[\]";
        }

        location @uploads {
                proxy_pass   http://tornados;
        }

        location / {
                proxy_pass http://tornados/;
                }

  }



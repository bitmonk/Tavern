Infrequently Asked Questions-


Why not use GPG to store data?
	RSA with PSS is ported to more architectures/platforms. 
	GPG basically all wraps through the one implementation, and is not easy to run with PyPy, Android, whatever.	

Why use 2048-bit keys, rather than 4096-bit keys?
	The underlying Tavern system will work with keys of any length - 
	Tavern will work with keys of any length, but 2048 bit keys are substantially faster to generate.
	2048-bit keys really are sufficiently hard to factor that it would take super-national effort to try to decrypt a message.
	
Why doesn't Tavern.com use Google Analytics or other Javascript trackers?
	Google Analytics is really useful, and provides a lot of data, but the way it works is by embedding raw Javascript from Google into your site.
	Google is generally trustworthy, but allowing their JS to run directly on the site allows them to modify the site, capture your keys, or otherwise compromise your security.
	That's a risk that we just don't want to take.
	Because of that, Tavern does not load any external JS resources.

Then why do you embed YouTube/Vimeo videos?
	Tavern can automatically display YouTube/Vimeo videos by use of an iframe.
	This loads the external page in a small, contained sandbox.
	Web Browsers are specifically designed to prevent content in iframes from interacting with the main page. 
	Even if they wanted to, Google couldn't manipulate the main page, outside of the iframe, in any way.
	
	
	

Why not allow something to be posted into multiple topics?
	Initial versions of Tavern DID allow Cross-posting, but eventually, the feature was removed. 
	Here's why:
	Basically anything you want to have happen to a post, you want to only affect ONE of the topics.

	For instance, if you subscribe to a moderator, you only want him to be able to moderate in one topic.
	If you upvote a post, we only want to count those up votes in one topic, otherwise crossposting to both a popular topic and an obscure one boost your popularity in the obscure one.
	Essentially, I found that I had the code to support something having multiple topics, but then at every turn, I was adding additional code to say that everything having to DO with the post only affected the one topic.


	This is likely for the best. Imagine a post about a vulnerability in a popular application.
		Members of the "Programming" topic might write about how to avoid it.
		Members of "WhiteHat" might write about how to guard your servers against it.
		Members of the the suite's Topic might talk about how it affects each of them.

	None of these posts would be directly interesting to the other Topics.

	In looking at it, there's relatively few benefits to having the same post be in multiple topics. Instead, the better way to handle Cross-posting is at the client-level.
	If you really want to cross-post something, a client could manually insert it in several topics. Replies would be split, and segregated to their respective posts.



Why does the website do the processing/signing on the server, rather than in the client?
		Because doing the processing in the client doesn't add much real security. (Really!)
		Let's say, for the sake of example, that I wrote the website so that all the processing happened in the browser, via Javascript.
		The Key was generated locally, saved via cookies or LocalStorage, and never touched the server.
		You're safer, right?

		Well... although it might seem that way, it's not so straight forward.
		As long as browser is downloading the Javascript from our site, if you don't trust us with your key, you're in trouble.

		Everytime you go to Tavern.com, your browser downloads a fresh copy of the Javascript.
		That means that if our site were taken over by the Bad Guys, they could just as easily replace the JS with one that uploaded your keys.

		The best way to avoid that is to use a local, native client. 
		The Tavern API fully supports native clients, so if you're really worried about us, use a local machine, so no one has the ability to get in the way.
		See Also: http://www.matasano.com/articles/javascript-cryptography/

Isn't storing my Private Key in a cookie bad?
	No.
	Storing a token which allows you to login to the site gives any potential attacker just as much access as giving them the key.
	
Why Tornado, and not Flash
	Flask didn't support Python3 at the time this project was created. Tornado, even when not doing the async tools, provides a really nice, low-magic framework for webdev.

Why store some things (like notes about users) on the server, and others (like votes) in localstorage?
	The upvotes/downvotes on existing comments are there to remind you what you've already voted on. 
	In theory, we could calculate it by loading it all from the server, but it would be too intensive, for too little gain.
	Instead, we just store it in localstorage, and if you change computers, we don't worry about displaying it.
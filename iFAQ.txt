Infrequently Asked Questions-



What type of Keys does Tavern generate?
	Tavern generates keys using RSA with PSS padding.
	This was chosen because it is widely available across multiple platforms, through multiple implementations.
	For example, GPG is an excellent framework for encryting data, but nearly everything uses the same GPG libraries.
	RSS is available through a large number of client libraries in multiple languages.
	ECC is a wonderful approach to public key cryptography, but is not yet widely available across platforms.


Why use 2048-bit keys, rather than 4096-bit keys?
	The underlying Tavern system will work with keys of any length - 
	Tavern will work with keys of any length, but 2048 bit keys are substantially faster to generate.
	2048-bit keys really are sufficiently hard to factor that it would take super-national effort to try to decrypt a message.

Why are you identifying with a SHA512 rather than a HMAC? Isn't that insecure?
	Messages are *not* being authenticated using the SHA512.
	Messaages are being signed using RSA keypairs, which is the primary means of authenticating a message.
	That is, knowing who sent it.
	Authenticating a message using the SHA(Message+Secret) would be insecure, and that's not what we're doing.
	Instead, the SHA512 value is separate from the identification - It's there to give the message a unique ID.
	This allow us to store the message in the server, have a single identifier to mark descendants, etc.
	Essentially, we are using the SHA512 purely as a message reference, not as authentication.

	
Why doesn't Tavern.com use Google Analytics or other Javascript trackers?
	Google Analytics is really useful, and provides a lot of data, but the way it works is by embedding raw Javascript from Google into your site.
	Google is generally trustworthy, but allowing their JS to run directly on the site allows them to modify the site, capture your keys, or otherwise compromise your security.
	That's a risk that we just don't want to take.
	Because of that, Tavern does not load any external JS resources.

Then why do you embed YouTube/Vimeo videos and other media?
	If you enable outside embedded content (it is disabled by default) Tavern can display YouTube/Vimeo videos by use of an iframe.
	
	This loads the external page in a small, contained sandbox.
    Web Browsers are specifically designed to prevent content in iframes from interacting with the main page. 
	The sites that are embedded this way will know what media you viewed that they host, but can't interact with the main page, or rewrite it to pose a major threat.


Why can't I click on embeded (external) images, and go to them directly?
	Tavern is using the HTML5 "Sandbox" element, to keep you safer from external links.
	In supported browsers, prevents embed content from changing the page you're on, to avoid spoofing and many other attacks.
	The disadvantage of this is that it also prevents clicking the thumbnail on embedded images from bringing you to the original.
	Ideally, you'd fix this by upload the image directly, rather than linking.
	Alternatively, click the link in the post, rather than the thumbnail.


Why not allow something to be posted into multiple topics?
	The initial versions of Tavern did allow cross-posting, and it took a bit of code (and an API change) to take it out.
	After testing, it really doesn't work very well-

	Almost anything you want to have happen to a post, you only want to effect the post in a Single topic.
	For example, if you upvote a post, it will be shown closer to the top of the list of posts for that topic.
	A post with 15 upvotes will be higher than a post with 5 upvotes.

	If you crossposted a message to two topics, however, with varying numbers of members, 
	it might get a LOT of upvotes from the popular topic, which would catapult it higher than should be in the less popular topic.

	You can fix this by special casing the voting code, to count votes separately for each topic.
	The problem was, I found I was special casing it in nearly *every* case.

	Separating posts also creates more targetted discussions-

	Imagine a post about a vulnerability in a popular application.
		Members of the "Programming" topic might write about how to avoid it.
		Members of "WhiteHat" might write about how to guard your servers against it.
		Members of the the suite's Topic might talk about how it affects each of them.
	None of these posts would be directly interesting to the other Topics.

	Or imagine if I were to post about a baseball game, and include both the "Yankees" and "Redsox" topics.
	I'd probably just be generating fights, more than encouraging worthwhile discussion between rivals.


	If you really want to cross-post something, the best way is probably to manually copy and paste it to make multiple posts.
	This will create better discussions, more meaningful voting, and allow for better filtering at the topic level.

	

How is my key stored?
	When you create an account at Tavern, we generate a private and public keypair for each account. 
	The public key is stored in the database, while the private key is encrypted, using a hashed version of your password as the encryption secret.

	This hashed version of your password is different from the hashed version we use to authenticate you.
	When you log in, we store this special hashed secret in a cookie on your machine. When you send a message to Tavern, we used this stored secret to unlock your Key, encrypt and send the message, then prompty forget about your key again.

Why does the website do the processing/signing on the server, rather than in the client?
		
	Unfortunately, PCs are often infected with viruses and Malware, storing sensetive data in cookies or localstorage is problematic.
	Locally stored keys open an attack vector for misbehaved browser extensions, and other local exploits, which we'd like to avoid.

	Instead, we store the key in two parts, as mentioned above.
	An encrypted version of the key is stored on the server, and the passphrase for the encryption is stored locally via cookies.

	This means that even we don't have access to your key, except during the times when you're logged in.


	Beyond misbehaved local threats, storing the key in the client also wouldn't add much security.
	Ultimately, since the Javascript is loading from our server, it has access to the key anyway.

	This means that any proxy that incercepts HTTPS requests to our server (as exist on some corporate proxies) could rewrite the JS, and steal your key.


	If you want to ensure that no one but you ever has any (even transient) access to your your key, and are sure you can keep your system secure, you can keep your key locally by running a copy of the Tavern software on your local machine.


Why do you not accept Bitcoins as Payments or Donations?
	I'd love to! But right now, accepting Bitcoins as payment is somewhat legally ambiguous. 
	For example, see the EFF statement at https://www.eff.org/deeplinks/2011/06/eff-and-bitcoin/
	While it'd be great to be able to do so, right now the law is not sufficiently clear on what is required, and I don't have a legal defense fund, so this isn't easily feasible.



	
Why Tornado, and not Flask
	Flask didn't support Python3 at the time this project was created. Tornado, even when not doing the async tools, provides a really nice, low-magic framework for webdev.

Why store some things (like notes about users) on the server, and others (like votes) in localstorage?
	The upvotes/downvotes on existing comments are there to remind you what you've already voted on. 
	In theory, we could calculate it by loading it all from the server, but it would be too intensive, for too little gain.
	Instead, we just store it in localstorage, and if you change computers, we don't worry about displaying it.
<PLURIC_CONTAINER>
<SERVERS>
	<SERVER>
		<TIME_SEEN>2011-04-01T01:53Z</TIME_SEEN>
		<SIGNATURE>hsfgdafsyzfrseurszxfdsaEafwyd...</SIGNATURE>
	</SERVER>
	<SERVER>
		<TIME_SEEN>2011-04-01T02:01Z</TIME_SEEN>
		<SIGNATURE>ABCDEFG...</SIGNATURE>
	</SERVER>
</SERVERS>

<MESSAGE_SHA512>3bf1683d7120a2e4482919ddefaeaa1db20ce4013c563e2f1d7f96ebde186dde80a7abe231458a7fd587d884585692a42e31f5b99932dfe90922e3fdca830a54</MESSAGE_SHA512>

<AUTHORITY> 400993485910747473038382868614...</AUTHORITY>
<AUTHORITY> 991921353197822591619597987982...</AUTHORITY>

<SENDER_SIGNATURE>ZYXABC...</SENDER_SIGNATURE>
<MESSAGE>
	
	<TOPICTAG>Startrek</TOPICTAG>
	<TOPICTAG>TV Shows</TOPICTAG>

	<TO>90751171059740188244</TO>
	<REGARDING>fa200fc2bbb11cfb2349668826685b5ec481d3555895877b5dd60d9981f411c665b2867023c61838cb78caf020ec61517aa3880ee225784fce6c560ecafeafaa</REGARDING>

	<COORDS>29.199505,-90.041242</COORDS>

	<AUTHOR>
		<FROM>rsa AAAAB3NzaC1yc2EAAAA...</FROM>
		<ABOUT>0cb128a753dec8d8d56eedc41e43083d02ec365407ca827fac7b18745eefa282ab6df1c8b97ddaed8b57ba87225bc6a0096c03effd71f8c68aea87db9fea4a43</ABOUT>	
		<PICTURE>84bf48ec3c1260b500919534e644608c513d2661ff6c43e93851bfb19826ce6949f59a438876fef752843823510e02c4eef8bf6b393b7879a1c28b3fef159df7</PICTURE>
		<CLIENT>Pluric for Android</CLIENT>
	</AUTHOR>

	<SUBJECT>Need more Trek!!</SUBJECTT>
	<BODY>When are they going to create a *new* series? I think the movies have re...</BODY>

	<BINARY>8f5454abbdb17c3ad4b98228eab1ff5e9f0ad6d298a2fa4b5100c744cab0741d5eb11e558fb8604b8a5d5ad60d80b6e3a208c7139a7a4d9614690455467f0b9e</BINARY>
	<BINARY>d2a0d25b624638797e4e34be9cef1a8ed58699406af9366764049073a33f14001a0a2fe9e954876c3680752a56add5b7da2038c8dc8bb7820e72f4c255b64348</BINARY>


</MESSAGE>

</PLURIC_CONTAINER>
---



The "time_seen" format is ISO 8601, and should be the GMT time the message was processed.
Use the specific ISO8601 format of YYYY-MM-DDTHH:MM:SSZ
	Where YYYY = 4 digit year, MM 2 digit month, DD 2 digit day. T is a literal T, then HH is 2 digit hour, a literal color, 2 digit minute, and a Z, indicating Zulu-time, or GMT.

The 'MESSAGE_SHA512' should be the SHA-512 hash of the 'Message' portion. This is included to give each message a unique MessageID, so it can be referenced, stored, etc.
SHA1 or 256 likely would have been sufficient, but 512 decreases collision chance. 


The Authority section allows an authority to sign the "message" portion of the message, to verify that some criteria has been satisfied. 
Exactly what criteria this is depends on the Authority- Examples might be 'completed a captcha', or 'Authenticated with a FB username/password'



The 'sender_signature' should be a RSA signature of the 'Message' portion. This is the initial signature on any message. The sender_signature uses a SHA256 hash of the message.

The server's signature should also be of the "Message" portion, not the entire container.

"Regarding" should be the 'POSTID_SHA512' of the message, if any, that this is in reference to.  If this is not in reference to another message, this field should be omitted.
You should not post a message with a "regarding" of a binary-control-message. If you do, a server should discard the message.




The "TopicTag" field may be used to specify the overall topic. This can be thought of akin to a HashTag in twitter, a Subreddit on Reddit, or a Newsgroup on Usenet.  
You may specify any number of topics you wish, but many servers will not carry a message if it has too many. (Pluric.com limits you to 3)
You may also omit any topictags entirely. In this case, only people following you are likely to see the message.

The optional "TO" field allows you to specify a public key of a person to whom the message is directed. Their client may or may not look for this field.
You may specify any number of "TO" fields, but many servers will not carry a message if it has too many. (Pluric.com limits you to 100)
You may omit a "TO" tag- Most messages shouldn't carry one!


The "Author" fields are included to positively tie a message with an author. This is included inside of the 'Message' block so that it is signed, along with the rest of the message.
The 'from' field should contain the RSA public key of the author. This is used as the author's primary identity. A client might include a "Follow User" button using this.
The optional 'About' field may contain a POSTID-SHA512 linking to the author's most-recent about-me Post.
The optional 'picture' field may contain a binary-control-file linking to a picture or avatar of the author. While this could be included in the 'about' section, it is included here for quick reference, so that a client may display a picture without having to pull and parse the 'about' section.

The client string is intentionally free-form- While it would be tempting to use a client signature here, it is ultimately useless, and should not be trusted.
Many/Most clients would be distributed to end-users (iPhone/Android/Etc). Even if the source were obscured the private signing key would need to be included, and could be extracted.
Since this is impossible to secure, it's best to treat this like a web browser's USER-AGENT. Interesting to know, but Entirely untrusted.
If you *really* want to sign a message, include a 'AUTHORITY' signature by the server, or, if you really, really, really want to, the client.


The "Subject" should contain the subject of the message. If you are replying to an existing message, it's fine to import from that message. DO NOT change the subject to add a "RE: "-whatever. Just set the "regarding" field.
The "Body" section should be plaintext. Github-flavored markdown could be a potential option, but there aren't parsing libraries for every platform, and linebreaks/etc are overkill for simple message exchange.


Any binaries that are to be included should have a link to the SHA512 of their Binary-Control-File.

****
When a Binary is uploaded to the server, the server will generate a binary-control-file for it.
This is necessary to track the transfer of binaries across servers, and to add the other control information that is in every message.

After an upload (ex: a POST request), the server will generate a  binary-control-file and reply with it's SHA512 hash.

Note- The default Pluric server will limit the number of binaries that can be uploaded by any given user in a time period, but any number of binary control file can be referenced in a message.

Binary control files follow the same control structures as a Message, but replace the "Message" section with 
<BINARY>
	<BYTES>947449</BYTES>
	<FILENAME>IMG_0081.JPG</FILENAME>
	<MIME>image/jpeg</MIME>
	<COORDS>29.199505,-90.041242</COORDS>
	<FILE_SHA512>ce7f20a3d91b60b561beeba6bd301e23544074496982e6db408940297ea25c2f2f8d28833dc5db2329822542be68ec37429405b548345f8f2771f084992b43e9</FILE_SHA512>
</BINARY>
The "POSTID_SHA512" field should be the SHA512 of the "BINARY" field, rather than a message, in this case.


The FILE_SHA512 should be the SHA_512 sum of the actual binary.
A server should not pass along a binary or control file if the data does not match- In particular- Verify the Size, since some clients may use this to determine if it should be displayed inline. 

****
The 'Message' section may alternatively be replaced by 'ENCRYPTED_MESSAGE'.


<ENCRYPTED_MESSAGE>
	<TO>PUBLICKEY_ABCDEFG</TO>
	<ENC_DATA>28eab1ff5e9f0ad6d298a2fa4b510f5454abbdb17c3a225784fce6c560e....</ENC_DATA>
</ENCRYPTED_MESSAGE>

The "To" field is optional, and allows clients to quickly discard a message if they know it is not one they can read.
The "ENC_DATA" text should be identical to the "MESSAGE" text above, including formatting, after decryption by the proper private-key.
In this case, the "POSTID-SHA512" field, should contain the SHA-512 of the "ENCRYPTED_MESSAGE" field.


http://www.thomasfrank.se/xml_to_json.html

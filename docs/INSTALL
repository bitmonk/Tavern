# Tavern install instructions
# It is assumed you will be using Python 3.3
# If you're on OSX, I suggest you install homebrew, which is used to pull further deps.

### For Debian-based systems 
    apt-get update
    apt-get install luajit g++ libpcre3-dev zlib1g-dev libssl-dev python-dev swig libfreetype6 libfreetype6-dev libjpeg8-dev libjpeg8 
    apt-get install libzzip-dev libxml2-dev libxslt-dev python3 python3-dev libmagic-dev python-imaging java-common yui-compressor 
    apt-get install gnupg make git-core scons libpq-dev curl
    # On 64 bit linux
        apt-get install lib32z1
    apt-get install mongodb-10gen


### for OS X
    brew install gnupg yuicompressor exiv2 libmagic mongodb python3 Boost gnu-sed scons autoconf automake libtool libxml2 libxslt libksba


# Install RVM, so we can load in a more recent ruby without messing up the system ruby
curl -L https://get.rvm.io | bash
source ~/.rvm/scripts/rvm


# Install the Gems that convert the sass files into CSS
gem install sass compass bourbon



# Install the current Tavern source
sudo mkdir -p /opt
cd /opt
sudo git clone git@github.com:e1ven/Tavern.git
sudo chown -R "$USER" Tavern
    

### If you want to run through nginx, we should use a custom compiled version for upload/etc.
### You can skip this step, and just connect directly for development.

    cd /usr/local/src
    wget http://nginx.org/download/nginx-1.4.1.tar.gz   
    tar xvfz nginx-1.4.1.tar.gz
    cd nginx-1.4.1

    wget http://www.grid.net.ru/nginx/download/nginx_upload_module-2.2.0.tar.gz
    tar -zxvf nginx_upload_module-2.2.0.tar.gz
    git clone https://github.com/mdirolf/nginx-gridfs.git
    CFLAGS="$CFLAGS -Wno-missing-field-initializers"
    cd nginx-gridfs
    git submodule init
    git submodule update
    cd mongo-c-driver
    git checkout v0.7.1
    cd ../..

    # on Linux
        ./configure --add-module=/usr/local/src/nginx-1.4.1/nginx_upload_module-2.2.0 --with-http_ssl_module  --prefix=/opt/nginx  --with-http_stub_status_module --add-module=/usr/local/src/nginx-1.4.1/nginx-gridfs --with-cc-opt='-Wno-missing-field-initializers -Wno-unused-function -Wno-unused-but-set-variable -D_POSIX_SOURCE'
    # On OS X
        ./configure --with-ld-opt="-L /usr/local/lib"  --add-module=/usr/local/src/nginx-1.4.1/nginx_upload_module-2.2.0 --add-module=/usr/local/src/nginx-1.4.1/nginx-gridfs --with-http_ssl_module  --prefix=/opt/nginx --with-http_stub_status_module --with-cc-opt='-Wno-missing-field-initializers -Wno-unused-function -D_POSIX_SOURCE'
    make
    make install

    mkdir /opt/uploads
    chmod 777 /opt/uploads/
    mkdir -p /var/www/cache/tmp

    cd /opt/Tavern/data/nginx/nginx /opt/nginx/sbin/initscript
    ln -s /opt/nginx/sbin/initscript /etc/init.d/nginx
    ln -s /opt/Tavern/data/nginx/nginx.conf /opt/nginx/conf/nginx.conf


# Create Tavern init file.
ln -s /opt/Tavern/tavern.sh /etc/init.d/tavern

# If you are on Python < 3.3, you will need to install Distribute, to get the rest of the python requirements.
# >= 3.3 appears to ship with it.
    cd /opt/Tavern/libs
    curl -O http://pypi.python.org/packages/source/d/distribute/distribute-0.6.30.tar.gz
    tar -xzvf distribute-0.6.30.tar.gz
    cd distribute-0.6.30
    python3 setup.py install
    /usr/local/bin/easy_install-3.2 pip
    
    
# Install the python deps.    
cd /opt/Tavern
pip3 install -r requirements.txt

# Copy in the geo-lookup IP database. 
# We want to download it from http://dev.maxmind.com/geoip/legacy/install/city to pull the most recent free version.
# This is not included in git because it is 17M, and frequently updated.
mkdir -p /opt/Tavern/data
curl http://geolite.maxmind.com/download/geoip/database/GeoLiteCity.dat.gz >  data/GeoIPCity.dat.gz
gunzip data/GeoIPCity.dat.gz


# There is a list of user agents included in the Tavern 'data' directory.
# This list is -not- kept up to date, however. You can update it easily if you want to, but it is not necessary.
curl "http://user-agent-string.info/rpc/get_data.php?key=free&format=ini&download=y" > /opt/Tavern/data/useragent.ini


# Install the Python3 port of PIL.
# Eventually, this will be unnecessary, but for now it still is ;(
cd /opt/Tavern/libs
git clone https://github.com/grahame/pil-py3k
cd pil-py3k

### If you are on 64_bit linux, you'll want to add the 64 bit lib dir as shown-
    vi setup.py
    on line 196, add
    add_directory(library_dirs, "/usr/lib/x86_64-linux-gnu")

python3 setup.py install


# Install PyLZMA, after fixing it to be py3 compatible.
cd /opt/Tavern/libs
git clone https://github.com/fancycode/pylzma.git
cd pylzma
2to3 -f all -w *.py
python3 setup.py install

# If you're in prod, you may want to generate these things automatically. 
# If not, they happen at startup anyway, so you can ignore ;)
    echo "/usr/bin/python /opt/Tavern/TopicList.py" > /etc/cron.hourly/generatetopics
    echo "/usr/bin/python /opt/Tavern/ModList.py" > /etc/cron.daily/findmods


cd /opt/Tavern
./start-dev-servers.sh

# Start Tavern in Debug mode, so you can watch for errors.
# Note - If you're on OSX, you may get a popup from the OS asking if you want to install Java.
# Say Yes. Then hit Control-C, and run tavern.sh debug again after Java is finished installing.
./tavern.sh debug

# Start Tavern for real, and run in the background.
./tavern.sh start


# SETTINGS
# Most settings should work automatically out of the box, but you may want to modify Domains to run things on your own.
# For instance, the serversetting 'embedserver' sends users to embed.is for embedded iframes.
# Feel free to run your own embed server, and change this setting to use it.

# Also, for production, you should change probably run a separate binaries server from / to a new domain.
# This will prevent some cookie reading attacks.

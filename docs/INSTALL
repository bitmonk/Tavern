# Tavern system-install instructions
# Tavern is written to run on Python 3.3+, under Ubuntu or OSX.
# It'll almost certainly work on other systems, but the docs are yet to be written.
# 
#                               IMPORTANT!
#           This is not the recomended way for testing out Tavern.
#           There is a Vagrant Virtual Machine, which will be -MUCH- Easier.
#
#           If you want to check out Tavern, you should almost certainly use the Vagrant box, at least at first.
#           These instructions will install it directly on the machine -
#           This makes it run faster, but also is more invasive, and a lot more work. 
#           I strongly suggest you checkout the DOCS/Using-Vagrant file for instructions on installing via Vagrant instead.
#           
#           If you complain "Tavern is hard to install", and you used these instructions instead of the Vagrant box, I will cry.
#           Really. I'll cry like a baby. I'll help you, but I'll be helping through tears.
#
#
#

# Install the Needed packages.
# Note - This will also install MongoDB, which will run in the background.
# Anytime you are not using Tavern, you may want to disable this.
# Before you argue "That's not convienient", see the note labeled IMPORTANT at the top ;) 

# Package install for Ubuntu

    apt-get install curl g++ git-core gnupg java-common lib32z1 libfreetype6 libfreetype6-dev libjpeg8 libjpeg8-dev liblcms1-dev \
    libmagic-dev libmpc2 libpcre3-dev libpq-dev libssl-dev libtiff4-dev libwebp-dev libxml2-dev libxslt-dev libzzip-dev luajit make \
    mongodb-10gen python-imaging python3 python3-dev scons swig tcl8.5-dev tk8.5-dev yui-compressor zlib1g-dev libpq-dev

# Package install for OSX
# Requires Homebrew - ( http://brew.sh/ )
    
    brew install gnupg yuicompressor exiv2 libmagic mongodb python3 Boost gnu-sed scons autoconf automake libtool libxml2 libxslt libksba \
    libmpc gmp libtiff libjpeg webp littlecms postgres 

# Install RVM, so we can load in a more recent ruby without messing up the system ruby
curl -L https://get.rvm.io | bash -s stable
source ~/.rvm/scripts/rvm || source /etc/profile.d/rvm.sh

# Install the Gems that convert the sass files into CSS
# Use a separate gemset as to not screw up system ruby.
rvm use 1.9.3@Tavern --create  --install
gem install sass compass bourbon



# Install the current Tavern source
sudo mkdir -p /opt
cd /opt
sudo git clone git@github.com:e1ven/Tavern.git
sudo chown -R "$USER" Tavern
    

### If you want to run through nginx, we should use a custom compiled version for upload/etc.
### You can skip this step, and just connect directly for development.

    cd /usr/local/src
    wget http://nginx.org/download/nginx-1.4.3.tar.gz   
    tar xvfz nginx-1.4.3.tar.gz
    cd nginx-1.4.3

    wget http://www.grid.net.ru/nginx/download/nginx_upload_module-2.2.0.tar.gz
    tar -zxvf nginx_upload_module-2.2.0.tar.gz
    git clone https://github.com/mdirolf/nginx-gridfs.git
    CFLAGS="$CFLAGS -Wno-missing-field-initializers"
    cd nginx-gridfs
    git submodule init
    git submodule update
    cd mongo-c-driver
    git checkout v0.7.1
    cd ../..

    # on Linux
        ./configure --with-http_ssl_module  --prefix=/opt/nginx  --with-http_stub_status_module --add-module=/usr/local/src/nginx-1.4.3/nginx-gridfs --with-cc-opt='-Wno-missing-field-initializers -Wno-unused-function -Wno-unused-but-set-variable -D_POSIX_SOURCE'
    # On OS X
        ./configure --with-ld-opt="-L /usr/local/lib"  --add-module=/usr/local/src/nginx-1.4.3/nginx_upload_module-2.2.0 --add-module=/usr/local/src/nginx-1.4.3/nginx-gridfs --with-http_ssl_module  --prefix=/opt/nginx --with-http_stub_status_module --with-cc-opt='-Wno-missing-field-initializers -Wno-unused-function -D_POSIX_SOURCE'
    make
    make install

    mkdir /opt/uploads
    chmod 777 /opt/uploads/
    mkdir -p /var/www/cache/tmp

    cp /opt/Tavern/data/nginx/nginx /opt/nginx/sbin/initscript
    rm /etc/init.d/nginx
    rm /opt/nginx/conf/nginx.conf
    ln -s /opt/nginx/sbin/initscript /etc/init.d/nginx
    ln -s /opt/Tavern/data/nginx/nginx.conf /opt/nginx/conf/nginx.conf


# Create Tavern init file.
ln -s /opt/Tavern/tavern.sh /etc/init.d/tavern

        
# Install the python deps.    
cd /opt/Tavern/libs

# Ensure we have VirtualEnv, so we can create our own packages.
curl -O https://pypi.python.org/packages/source/v/virtualenv/virtualenv-1.10.tar.gz
tar -zxvf virtualenv-1.10.tar.gz
cd ..
# Create a Virtual Environment, so we don't spew across the whole system
libs/virtualenv-1.10/virtualenv.py  --no-site-packages --distribute tmp/env -p `which python3.3`
source tmp/env/bin/activate

pip install -r requirements.txt

# Copy in the geo-lookup IP database. 
# We want to download it from http://dev.maxmind.com/geoip/legacy/install/city to pull the most recent free version.
# This is not included in git because it is 17M, and frequently updated.
cd data
curl -O http://geolite.maxmind.com/download/geoip/database/GeoLiteCity.dat.gz
gunzip GeoLiteCity.dat.gz


# There is a list of user agents included in the Tavern 'data' directory.
# This list is -not- kept up to date, however. You can update it easily if you want to, but it is not necessary.
curl "http://user-agent-string.info/rpc/get_data.php?key=free&format=ini&download=y" > useragent.ini

# Pull down a local copy of Robohash.org, so we don't need any outward links
cd /opt/Tavern/libs
git clone https://github.com/e1ven/Robohash.git


# If you're in prod, you may want to generate various things on a schedule.
# If not, they happen at startup anyway, so you can ignore ;)
    echo "/usr/bin/python /opt/Tavern/TopicList.py" > /etc/cron.hourly/generatetopics
    echo "/usr/bin/python /opt/Tavern/ModList.py" > /etc/cron.daily/findmods

# Make sure your DB is running.
# I'd suggest installing https://github.com/remysaissy/mongodb-macosx-prefspane instead of using the ./start-dev-servers.sh script
cd /opt/Tavern
./start-dev-servers.sh

# Start Tavern in Debug mode, so you can watch for errors.
# Note - If you're on OSX, you may get a popup from the OS asking if you want to install Java.
# Say Yes. Then hit Control-C, and run tavern.sh debug again after Java is finished installing.
./tavern.sh debug

# Start Tavern for real, and run in the background.
./tavern.sh start


# SETTINGS
# Most settings should work automatically out of the box, but you may want to modify Domains to run things on your own.
# For instance, the serversetting 'embedserver' sends users to embed.is for embedded iframes.
# Feel free to run your own embed server, and change this setting to use it.

# Also, for production, you should change probably run a separate binaries server from / to a new domain.
# This will prevent some cookie reading attacks.
